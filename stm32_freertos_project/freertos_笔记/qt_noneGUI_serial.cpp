
#include <QCoreApplication>
#include <QByteArray>
#include <QString>
#include <QTextStream>
#include<QSerialPort>
#include<QSerialPortInfo>
#include<QDebug>
QTextStream cout(stdout);
QTextStream cin(stdin);

void show_menu();
void show_menu_pwm();
void checkpwm_input();
void generate_pwmbuffer();
bool show_port_information();
void init_serialport();
void setPWM(QSerialPort *myserialport);

QString portname;
QByteArray pwm_message;
quint16 TIMx_CH[4]={0},CRC_NUM;
quint16 arr[4]={0};
typedef unsigned short uint16_t;
typedef unsigned char uint8_t;
/* Table of CRC values for highorder byte */
static unsigned char auchCRCHi[] = {
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01,
    0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
    0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01,
    0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
    0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81,
    0x40 };
/* Table of CRC values for loworder byte */
static unsigned char auchCRCLo[] = {
    0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4,
    0x04, 0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
    0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A, 0x1E, 0xDE, 0xDF, 0x1F, 0xDD,
    0x1D, 0x1C, 0xDC, 0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
    0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32, 0x36, 0xF6, 0xF7,
    0x37, 0xF5, 0x35, 0x34, 0xF4, 0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
    0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA, 0xEE,
    0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
    0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2,
    0x62, 0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
    0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68, 0x78, 0xB8, 0xB9, 0x79, 0xBB,
    0x7B, 0x7A, 0xBA, 0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
    0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0, 0x50, 0x90, 0x91,
    0x51, 0x93, 0x53, 0x52, 0x92, 0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
    0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98, 0x88,
    0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
    0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80,
    0x40 };
/*
 * Compute CRC-16
 */
static uint16_t crc16(QByteArray buffer, uint16_t buffer_length)
{
    uint8_t crc_hi = 0xFF; /* high CRC byte initialized */
    uint8_t crc_lo = 0xFF; /* low CRC byte initialized */
    unsigned int i; /* will index into CRC lookup */
    int index = 0;

    /* pass through message buffer */
    while (buffer_length--) {
        i = crc_hi ^(uint8_t) buffer.at(index++); /* calculate the CRC  */
        crc_hi = crc_lo ^ auchCRCHi[i];
        crc_lo =auchCRCLo[i];
    }
    return (crc_hi << 8 | crc_lo);
}
int main(int argc, char *argv[])
{
    QCoreApplication a(argc, argv);
    if(show_port_information())
    {
        init_serialport();
    }
    return a.exec();
}
void init_serialport()
{
    QSerialPort *serialPort=new QSerialPort;
    quint8 ch;
            do{
                show_menu();
                serialPort->setPortName(portname);
            }while(serialPort->open(QSerialPort::ReadWrite)==false);

            cout<<"sucess open the port"<<endl;//端口
            serialPort->setDataBits(QSerialPort::Data8);//数据位
            serialPort->setBaudRate(9600);//波特率
            serialPort->setParity(QSerialPort::NoParity);//奇偶校验
            serialPort->setStopBits(QSerialPort::OneAndHalfStop);//停止位
            do
            {show_menu_pwm();
            checkpwm_input();
            generate_pwmbuffer();
            setPWM(serialPort);
            ch=getchar();
            }while(ch!='#');
            serialPort->close();
}
bool show_port_information()
{

    if(QSerialPortInfo::availablePorts().size()==0)
       { cout<<"no available com!,please plug in the right com_equipment and restart it!"<<endl;
         return false;

    }
    else{
        cout<<"avalible ports:"<<endl;
    foreach (const QSerialPortInfo &info, QSerialPortInfo::availablePorts())
    {
        cout << "Name: " << info.portName()<<endl;
        cout << "Description : " << info.description()<<endl;
    }

     return true;
    }
}
void show_menu()
{

    cout<<"Now chose the right serialport:"<<endl;
    cin>>portname;
}
void show_menu_pwm()
{

    cout<<"Now you can set the PWM:"<<endl;
    cout<<"PWM1 PWM2 PWM3 PWM4"<<endl;
    cin>>TIMx_CH[0]>>TIMx_CH[1];
    cin>>TIMx_CH[2]>>TIMx_CH[3];

}
void setPWM(QSerialPort *myserialport)
{
    //  qDebug()<<"sendbuffer"<<endl;
    //  qDebug()<<pwm_message.toHex();
     myserialport->write(pwm_message);
     //等一个ACK
     QByteArray readData = myserialport->readAll();
         while (myserialport->waitForReadyRead(500))
             readData.append(myserialport->readAll());

         if (myserialport->error() == QSerialPort::ReadError) {
            cout<<"ReadError"<<endl;

         } else if (myserialport->error() == QSerialPort::TimeoutError && readData.isEmpty()) {

             cout<<" nodate"<<endl;
             cout<<"you may need to reaset the board "<<endl;
         }
         else
         {
            // qDebug()<<readData.toHex();
             cout<<"set pwm success"<<endl;
             cout<<"press enter to contiue or you can close the program "<<endl;
         }
         myserialport->clear();
}
void checkpwm_input()
{
    if(TIMx_CH[0]<500||TIMx_CH[0]>20000||TIMx_CH[1]<500||TIMx_CH[1]>20000||TIMx_CH[2]<500||TIMx_CH[2]>20000||TIMx_CH[3]<500||TIMx_CH[3]>20000)
    {
        cout<<"Please set everychannel between 500 and 200000 (500HZ-20KHZ)"<<endl;
        show_menu_pwm();
    }
}

void generate_pwmbuffer()
{
    pwm_message.clear(); //每次生成前先清该串
    //加一个check_input();
    pwm_message[0]=0xff;
    pwm_message[1]=0xee;

    for(int i=0;i<4;i++)
    {
        arr[i]=8000000/TIMx_CH[i];
        pwm_message.append(arr[i]>>8);
        pwm_message.append(arr[i]);
    }
   //  qDebug()<<pwm_message.size();
     CRC_NUM=crc16(pwm_message,pwm_message.size());
     pwm_message.append(CRC_NUM>>8);
     pwm_message.append(CRC_NUM);
}
