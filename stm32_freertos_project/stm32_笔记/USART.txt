1、USART的库函数
###########################################################################
void  USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef *USART_InitStruct)
使用：
    USART_InitTypeDef USART_InitStructure;
    USART_InitStructure.USART_BaudRate=115200;
    USART_InitStructure.USART_WordLength=USART_WordLength_8b;
    USART_InitStructure.USART_StopBits=USART_StopBits_1;
    USART_InitStructure.USART_Parity=USART_Parity_No;
    USART_InitStructure.USART_HardWareFlowControl=USART_HardWareFlowControl_None;
    USART_InitStructure.USART_Mode=USART_Mode_Tx|USART_Mode_Rx;
    USART_Init(USART1,&USART_InitStructure);
###########################################################################
void USART_Cmd(USART_TypeDEf* USARTx,FunctionalState NewState)
使用：
    USART_ITConfig(USART1,ENABLE);
###########################################################################
void USART_ITConfig(USART_TypeDefe* USARTx,u16 USART_IT,FunctionalState NewState)
使用：
    USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
###########################################################################
void USART_SendData(USART_TypeDef *USARTx,u8 Data);
使用：
  USART_SendData(USART3,0x26);
##########################################################################
u8 USART_ReceiveData(USART_TypeDef* USARTx)
使用：
    u8 RxData;
    RxData=USART_ReceiveData(USART2);
##########################################################################
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx,u16 USART_FLAG)
使用：
    FlagStatus Status;
    Status=USART_GetFlagStatus(USART1,USART_FLAG_TXE);
#########################################################################
void USART_ClearFlag(USART_TypeDef* USARTx,u16 USART_FLAG)
ITStatus USART_GetITStatus(USART_TypeDef *USARTx,u16 USART_IT)
#########################################################################

uart_putchar
#define LED_OFF GPIO_SetBits(GPIOC,GPIO_Pin_13)
#define LED_ON GPIO_ResetBits(GPIOC,GPIO_Pin_13)
void led_init();
void uart_init();
void uart_putchar(u8 ch)
{
    USART_SendData(USART1,ch);
       while(USART_GetFlagStatus(USART1,USART_FLAG_TXE)==RESET)
        ;
}
void Delay()
{
    for(u32 i=0;i<0xfffff;i++)
        ;
}
int main(void)
{
    led_init();
    uart_init();
           //清除标志位，否则第1位数据会丢失
    USART_ClearFlag(USART1,USART_FLAG_TC);
      uart_putchar(0x34);
  while(1)
  {
        LED_ON;
        Delay();
        LED_OFF;
    //    usart_putchar(0x34);
        Delay();
        Delay();

  }
}
void uart_init()
{
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA, ENABLE);

    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Speed=GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_AF_PP;
    GPIO_Init(GPIOA,&GPIO_InitStructure);

    GPIO_InitStructure.GPIO_Pin=GPIO_Pin_10;
    GPIO_InitStructure.GPIO_Mode=GPIO_Mode_IN_FLOATING;
    GPIO_Init(GPIOA,&GPIO_InitStructure);

    USART_InitStructure.USART_BaudRate=9600; //波特率
    USART_InitStructure.USART_WordLength=USART_WordLength_8b; //数据位数
    USART_InitStructure.USART_StopBits=USART_StopBits_1; //停止位
    USART_InitStructure.USART_Parity=USART_Parity_No; //无奇偶校验
    USART_InitStructure.USART_HardwareFlowControl=USART_HardwareFlowControl_None;
    //无硬件流控制
    USART_InitStructure.USART_Mode=USART_Mode_Tx|USART_Mode_Rx;
    //收发均使能
    USART_Init(USART1,&USART_InitStructure);

    USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);
    USART_Cmd(USART1,ENABLE);

    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2 );
    NVIC_InitStructure.NVIC_IRQChannel=USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=1;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority=0;
    NVIC_InitStructure.NVIC_IRQChannelCmd=ENABLE;
    NVIC_Init(&NVIC_InitStructure);

}
void led_init()
{
      RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA| RCC_APB2Periph_GPIOB|
                         RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD|
                         RCC_APB2Periph_GPIOE,ENABLE);
  GPIO_InitTypeDef GPIO_InitStructure;
  GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;
  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
  GPIO_Init(GPIOC, &GPIO_InitStructure);
  GPIO_SetBits(GPIOC, GPIO_Pin_13 );
}

void USART1_IRQHandler(void)
{
   if(USART_GetITStatus(USART1,USART_IT_RXNE)==SET)
   {
        USART_ClearITPendingBit(USART1, USART_IT_RXNE);
       LED_OFF;
       uart_putchar(USART_ReceiveData(USART1));
       LED_ON;
   }
}
